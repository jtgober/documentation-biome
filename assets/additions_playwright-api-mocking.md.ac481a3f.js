import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.f4487b77.js";const l="/documentation-biome/mock-browser.png",o="/documentation-biome/devtool.png",e="/documentation-biome/strawberrymock.png",t="/documentation-biome/thebestcourse.png",m=JSON.parse('{"title":"Mocking the Browser Api","description":"","frontmatter":{},"headers":[],"relativePath":"additions/playwright-api-mocking.md","filePath":"additions/playwright-api-mocking.md","lastUpdated":1694315370000}'),r={name:"additions/playwright-api-mocking.md"},c=p(`<h1 id="mocking-the-browser-api" tabindex="-1">Mocking the Browser Api <a class="header-anchor" href="#mocking-the-browser-api" aria-label="Permalink to &quot;Mocking the Browser Api&quot;">​</a></h1><p>In this module we are going to be talking about this piece of code supplied by the playwright docs</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@playwright/test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Mock the api call before navigating</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">route</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{ name: </span><span style="color:#9ECBFF;">&#39;Strawberry&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> }];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">fulfill</span><span style="color:#E1E4E8;">({ json });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Strawberry&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBeVisible</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, expect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@playwright/test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">page</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Mock the api call before navigating</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">route</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ name: </span><span style="color:#032F62;">&#39;Strawberry&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> }];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">fulfill</span><span style="color:#24292E;">({ json });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getByText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Strawberry&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toBeVisible</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Lets first take a look at the <a href="https://demo.playwright.dev/api-mocking" target="_blank" rel="noreferrer">page</a></p><p><img src="`+l+'" alt=""></p><p>Alright so this is a list a fruits. But lets also check our devtools for moment</p><p>If we go to the Network tab, and refresh the page with f5. we will se some new information</p><p><img src="'+o+'" alt=""></p><p>Notice <code>fruits</code> has a request url of <code>https://demo.playwright.dev/api-mocking/api/v1/fruits</code> which is a GET call with a status of <code>304</code> (unmodified)</p><p>Now that we have done a little investigation work lets go run our code in UI mode.</p><h2 id="code-run" tabindex="-1">Code run <a class="header-anchor" href="#code-run" aria-label="Permalink to &quot;Code run&quot;">​</a></h2><p><code>npx playwright test --ui</code></p><p>After we run the code there we see something new. Instead of a list of fruits we now just have a single item</p><p><img src="'+e+`" alt=""></p><p>Within the network tab we also see that the GET /fruits call now has a status code of <code>200</code> So how does this work? Lets break down the code</p><h2 id="code-breakdown" tabindex="-1">Code Breakdown <a class="header-anchor" href="#code-breakdown" aria-label="Permalink to &quot;Code Breakdown&quot;">​</a></h2><p>Let&#39;s break down the code step by step:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@playwright/test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// When a request to this URL is made, the code inside the callback function.</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">route</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// this sets up a route interception for any requests to a url matching that specific pattern of */**/api/v1/fruits</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{ name: </span><span style="color:#9ECBFF;">&#39;Strawberry&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> }]; </span><span style="color:#6A737D;">// Here we want our response to be a strawberry with an id of 21</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">fulfill</span><span style="color:#E1E4E8;">({ json }); </span><span style="color:#6A737D;">// The original response is then fulfilled using await route.fulfill({ response, json }), but with the modified JSON object.</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Strawberry&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBeVisible</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, expect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@playwright/test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">page</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// When a request to this URL is made, the code inside the callback function.</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">route</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// this sets up a route interception for any requests to a url matching that specific pattern of */**/api/v1/fruits</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ name: </span><span style="color:#032F62;">&#39;Strawberry&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> }]; </span><span style="color:#6A737D;">// Here we want our response to be a strawberry with an id of 21</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">fulfill</span><span style="color:#24292E;">({ json }); </span><span style="color:#6A737D;">// The original response is then fulfilled using await route.fulfill({ response, json }), but with the modified JSON object.</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getByText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Strawberry&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toBeVisible</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Awesome! but what happens if we add something unexpected. im going multiple items since its an array as well.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@playwright/test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Mock the api call before navigating</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">route</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{ name: </span><span style="color:#9ECBFF;">&#39;Jonathan Gober&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> },{ name: </span><span style="color:#9ECBFF;">&#39;The Best&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> },{ name: </span><span style="color:#9ECBFF;">&#39;Playwright Automation Course!&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> }];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">fulfill</span><span style="color:#E1E4E8;">({ json });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Jonathan Gober&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBeVisible</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, expect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@playwright/test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mocks a fruit and doesn&#39;t call api&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">page</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Mock the api call before navigating</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">route</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{ name: </span><span style="color:#032F62;">&#39;Jonathan Gober&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> },{ name: </span><span style="color:#032F62;">&#39;The Best&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> },{ name: </span><span style="color:#032F62;">&#39;Playwright Automation Course!&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">fulfill</span><span style="color:#24292E;">({ json });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Assert that the Strawberry fruit is visible</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getByText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Jonathan Gober&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">toBeVisible</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+t+`" alt=""></p><p>Also, instead of modifying the entire response, we can push additional items to the array of fruits.</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, expect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@playwright/test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gets the json from api and adds a new fruit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">page</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Get the response and add to it</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">route</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    json.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ name: </span><span style="color:#9ECBFF;">&#39;Gojojojo&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">9001</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Fulfill using the original response, while patching the response body</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// with the given JSON object.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">fulfill</span><span style="color:#E1E4E8;">({ response, json });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> page.</span><span style="color:#B392F0;">goto</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Assert that the new fruit is visible</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(page.</span><span style="color:#B392F0;">getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Gojojojo&#39;</span><span style="color:#E1E4E8;">, { exact: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })).</span><span style="color:#B392F0;">toBeVisible</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, expect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@playwright/test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;gets the json from api and adds a new fruit&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> ({ </span><span style="color:#E36209;">page</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Get the response and add to it</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;*/**/api/v1/fruits&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">route</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    json.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ name: </span><span style="color:#032F62;">&#39;Gojojojo&#39;</span><span style="color:#24292E;">, id: </span><span style="color:#005CC5;">9001</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Fulfill using the original response, while patching the response body</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// with the given JSON object.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">fulfill</span><span style="color:#24292E;">({ response, json });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Go to the page</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> page.</span><span style="color:#6F42C1;">goto</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://demo.playwright.dev/api-mocking&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Assert that the new fruit is visible</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(page.</span><span style="color:#6F42C1;">getByText</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Gojojojo&#39;</span><span style="color:#24292E;">, { exact: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> })).</span><span style="color:#6F42C1;">toBeVisible</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>This is neat stuff byt why do mocking?</p><h2 id="usefulness-of-mocks" tabindex="-1">Usefulness of Mocks <a class="header-anchor" href="#usefulness-of-mocks" aria-label="Permalink to &quot;Usefulness of Mocks&quot;">​</a></h2><p><code>Test Isolation:</code> this is when dependencies are still in development, under maintenance, or have rate limits or usage fees.</p><p><code>Testing without External Dependencies:</code> API mocking allows you to test your code even when the real API or service is unavailable or unreliable.</p><p><code>Predictable Testing Environments:</code> Mocked APIs provide a controlled and predictable testing environment.</p><p>Theses are just the tip of the iceberg when it comes to <code>Mocking</code>. It can be a very valuable tool and a great asset to your arsenal!</p>`,29),E=[c];function y(i,u,d,F,b,h){return a(),n("div",null,E)}const w=s(r,[["render",y]]);export{m as __pageData,w as default};
