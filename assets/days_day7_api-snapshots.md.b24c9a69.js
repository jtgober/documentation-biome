import{_ as s,o as n,c as a,e}from"./app.f5a3d66d.js";const o="/documentation-biome/snapshot.png",l="/documentation-biome/comparisons.png",A=JSON.parse('{"title":"Api Snapshots Testing","description":"","frontmatter":{},"headers":[{"level":2,"title":"Starter Code (if you need it)","slug":"starter-code-if-you-need-it","link":"#starter-code-if-you-need-it","children":[]},{"level":2,"title":"Changing the snapshot location","slug":"changing-the-snapshot-location","link":"#changing-the-snapshot-location","children":[]},{"level":2,"title":"Comparisons","slug":"comparisons","link":"#comparisons","children":[]},{"level":2,"title":"Final Thoughts","slug":"final-thoughts","link":"#final-thoughts","children":[]}],"relativePath":"days/day7/api-snapshots.md","lastUpdated":1674577903000}'),p={name:"days/day7/api-snapshots.md"},t=e(`<h1 id="api-snapshots-testing" tabindex="-1">Api Snapshots Testing <a class="header-anchor" href="#api-snapshots-testing" aria-hidden="true">#</a></h1><p>First and for most, what is an api snapshot testing? Snapshot testing is a type of comparison testing. Snapshot testing makes sure that the ui does not change unexpectedly.</p><p>So lets go ahead and set up a snapshot for our <code>poke-api.spec.js</code></p><h2 id="starter-code-if-you-need-it" tabindex="-1">Starter Code (if you need it) <a class="header-anchor" href="#starter-code-if-you-need-it" aria-hidden="true">#</a></h2><p>to start, lets ensure that the following still works</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> expect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@playwright/test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Pokemon information</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokemon</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">pokemon/squirtle</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokejson</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokemon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In order to get snapshots to work for our api testing there is one trick that we need to do.</p><p>Take note of the JSON.stringify before we bring in our response (pokejson)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight has-focused-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> expect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@playwright/test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Pokemon information</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokemon</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">pokemon/squirtle</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokejson</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pokemon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pokejson</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatchSnapshot</span><span style="color:#F07178;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>After running, you should notice an error, which also states that it creates the snapshot.</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">chromium</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> › poke-api.spec.js:</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> › Pokemon information =======================================</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">A</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snapshot</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doesn</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">t exist at C:\\Users\\gober\\OneDrive\\Desktop\\poke-api\\tests\\poke-api.spec.js-snapshots\\Pokemon-information-1-chromium-win32.txt, writing actual.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">      5 |     const pokemon = await request.get(\`pokemon/squirtle\`);</span></span>
<span class="line"><span style="color:#C3E88D;">      6 |     const pokejson = await pokemon.json()</span></span>
<span class="line"><span style="color:#C3E88D;">    &gt; 7 |     expect(JSON.stringify(pokejson)).toMatchSnapshot()</span></span>
<span class="line"><span style="color:#C3E88D;">        |                                      ^</span></span>
<span class="line"><span style="color:#C3E88D;">      8 | });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        at C:\\Users\\gober\\OneDrive\\Desktop\\poke-api\\tests\\poke-api.spec.js:7:38</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">  1 failed</span></span>
<span class="line"><span style="color:#C3E88D;">    [chromium] › poke-api.spec.js:4:1 › Pokemon information ========================================</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Take note of the explorer menu. Here you should see the created snapshot withing the snapshots folder. <img src="`+o+`" alt=""></p><p>Running the test again, should show a success</p><p>Awesome! there are a few things that i would like to change to the file structure. Personally i don&#39;t like the super long file name, and id prefer it be in JSON rather than a text file. <strong>So lets head over to the playwright configuration file</strong></p><h2 id="changing-the-snapshot-location" tabindex="-1">Changing the snapshot location <a class="header-anchor" href="#changing-the-snapshot-location" aria-hidden="true">#</a></h2><p>In the playwright config.js We can add the snapshotPathTemplate to the following</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight has-focused-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">testDir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./tests</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">snapshotPathTemplate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{testDir}/snapshots/{testFilePath}/{arg}.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* Maximum time one test can run for. */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">expect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Maximum time expect() should wait for the condition to be met.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * For example in \`await expect(locator).toHaveText();\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><code>{testDir}</code> Will ensure that the folder is created in the <strong>tests</strong> folder</li><li><code>snapshots</code> Is a new folder that sounds good/accurate to me</li><li><code>{testFilePath}</code> Is the name of the test being ran</li><li><code>{arg}</code> Relative snapshot path without extension. These come from the arguments passed to the toHaveScreenshot() and toMatchSnapshot() calls; if called without arguments, this will be an auto-generated snapshot name.</li><li><code>.json</code> The type of file to create</li></ul><p>Afterword, lets delete the old snapshots folder and re-run</p><p>now we have (in my opinion) a better to read folder structure. Plus, now that it is in JSON we can easily format it and view ALL of the json that we received from the endpoint! Very cool. Now lets take a look and see what happens, and what we should do if there is an issue.</p><h2 id="comparisons" tabindex="-1">Comparisons <a class="header-anchor" href="#comparisons" aria-hidden="true">#</a></h2><p>Lets pretend for a moment the something wonky happened to the response and it changed in some way. Lets say all the names for squirtle, changed to something else like, <em><strong>aquaman</strong></em>. fitting ish?</p><p>Now lets see what happens when we re-run... it fails as we expected it would. So now we have 2 files under our test results for <em><strong>actual</strong></em> and <em><strong>expected</strong></em></p><p><img src="`+l+'" alt=""></p><p>To make this better</p><ol><li>Change both of the file types to json</li><li>Ensure both are formatted</li><li>Select both files</li><li>Right click -&gt; Compare Selected</li></ol><p>Afterword you should be able to see that there are differences between the two.</p><p>ok, im going to fix the code back to where it was</p><h2 id="final-thoughts" tabindex="-1">Final Thoughts <a class="header-anchor" href="#final-thoughts" aria-hidden="true">#</a></h2><p>Snapshot testing can be great. But sometimes, it can be much more difficult. For example, what if the data we are receiving is dynamic? We will talk about that at a later date, but for now lets end it here. Thanks again!</p>',30),r=[t];function c(i,y,D,h,F,C){return n(),a("div",null,r)}const u=s(p,[["render",c]]);export{A as __pageData,u as default};
