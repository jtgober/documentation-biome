import{_ as t,o as e,c as a,g as n}from"./app.207cc8ad.js";const m=JSON.parse('{"title":"First Playwright Automation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Automation Playground Codegen","slug":"automation-playground-codegen","link":"#automation-playground-codegen","children":[]},{"level":2,"title":"Element Selector Examples","slug":"element-selector-examples","link":"#element-selector-examples","children":[]}],"relativePath":"days/day4/first-automation.md","lastUpdated":1673638586000}'),o={name:"days/day4/first-automation.md"},l=n(`<h1 id="first-playwright-automation" tabindex="-1">First Playwright Automation <a class="header-anchor" href="#first-playwright-automation" aria-hidden="true">#</a></h1><p>alright lets get into some automating! for the majority of this course we will be using the following: <a href="http://www.uitestingplayground.com/" target="_blank" rel="noreferrer">http://www.uitestingplayground.com/</a></p><h2 id="automation-playground-codegen" tabindex="-1">Automation Playground Codegen <a class="header-anchor" href="#automation-playground-codegen" aria-hidden="true">#</a></h2><p>Lets take a look at playwrights code generation tool</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">playwright</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">codegen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">uitestingplayground.com</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>using this command brings up the website, and we can click on various things to generate code from the code inspector. also, you can change to any language.</p><p>Although it is a good tool. it isn&#39;t without faults. finding everything by text isn&#39;t the best way to go about finding elements. there are better locators to use. lets take a look at a page and open our dev tools.</p><h2 id="element-selector-examples" tabindex="-1">Element Selector Examples <a class="header-anchor" href="#element-selector-examples" aria-hidden="true">#</a></h2><table><thead><tr><th>Element Selectors</th><th style="text-align:center;">how to select in playwright (symbol)</th><th style="text-align:center;">example</th></tr></thead><tbody><tr><td>CSS Selector Class</td><td style="text-align:center;">.</td><td style="text-align:center;">page.click(&#39;.btn-primary&#39;);</td></tr><tr><td>CSS Selector ID</td><td style="text-align:center;">#</td><td style="text-align:center;">page.click(&#39;#btn-primary&#39;);</td></tr><tr><td>By Text</td><td style="text-align:center;">text=</td><td style="text-align:center;">page.click(&#39;text=Button&#39;);</td></tr><tr><td>By Xpath</td><td style="text-align:center;">xpath=</td><td style="text-align:center;">page.click(&#39;xpath=//button&#39;);</td></tr></tbody></table><p>the main one to use would be by ID if it is available, because id&#39;s are unique, and don&#39;t have duplicates on a page. However, if you have a dynamic id, it will change every time on page load, and should not be used.</p><p>start writing good tests early</p>`,11),s=[l];function i(r,d,c,p,g,h){return e(),a("div",null,s)}const y=t(o,[["render",i]]);export{m as __pageData,y as default};
